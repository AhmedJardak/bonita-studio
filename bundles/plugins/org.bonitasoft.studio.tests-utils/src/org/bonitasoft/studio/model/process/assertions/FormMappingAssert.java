package org.bonitasoft.studio.model.process.assertions;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.bonitasoft.studio.model.process.FormMapping;

/**
 * {@link FormMapping} specific assertions - Generated by CustomAssertionGenerator.
 */
public class FormMappingAssert extends AbstractAssert<FormMappingAssert, FormMapping> {

    /**
     * Creates a new </code>{@link FormMappingAssert}</code> to make assertions on actual FormMapping.
     * 
     * @param actual the FormMapping we want to make assertions on.
     */
    public FormMappingAssert(final FormMapping actual) {
        super(actual, FormMappingAssert.class);
    }

    /**
     * An entry point for FormMappingAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myFormMapping)</code> and get specific assertion with code completion.
     * 
     * @param actual the FormMapping we want to make assertions on.
     * @return a new </code>{@link FormMappingAssert}</code>
     */
    public static FormMappingAssert assertThat(final FormMapping actual) {
        return new FormMappingAssert(actual);
    }

    /**
     * Verifies that the actual FormMapping is external.
     * 
     * @return this assertion object.
     * @throws AssertionError - if the actual FormMapping is not external.
     */
    public FormMappingAssert isExternal() {
        // check that actual FormMapping we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("Expected actual FormMapping to be external but was not.", actual);

        // check
        if (!actual.isExternal()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FormMapping is not external.
     * 
     * @return this assertion object.
     * @throws AssertionError - if the actual FormMapping is external.
     */
    public FormMappingAssert isNotExternal() {
        // check that actual FormMapping we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("Expected actual FormMapping not to be external but was.", actual);

        // check
        if (actual.isExternal()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FormMapping is overview.
     * 
     * @return this assertion object.
     * @throws AssertionError - if the actual FormMapping is not overview.
     */
    public FormMappingAssert isOverview() {
        // check that actual FormMapping we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("Expected actual FormMapping to be overview but was not.", actual);

        // check
        if (!actual.isOverview()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FormMapping is not overview.
     * 
     * @return this assertion object.
     * @throws AssertionError - if the actual FormMapping is overview.
     */
    public FormMappingAssert isNotOverview() {
        // check that actual FormMapping we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("Expected actual FormMapping not to be overview but was.", actual);

        // check
        if (actual.isOverview()) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FormMapping's targetForm is equal to the given one.
     * 
     * @param targetForm the given targetForm to compare the actual FormMapping's targetForm to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FormMapping's targetForm is not equal to the given one.
     */
    public FormMappingAssert hasTargetForm(final String targetForm) {
        // check that actual FormMapping we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> targetForm to be:\n  <%s>\n but was:\n  <%s>", actual, targetForm, actual.getTargetForm());

        // check
        if (!actual.getTargetForm().equals(targetForm)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FormMapping's taskName is equal to the given one.
     * 
     * @param taskName the given taskName to compare the actual FormMapping's taskName to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FormMapping's taskName is not equal to the given one.
     */
    public FormMappingAssert hasTaskName(final String taskName) {
        // check that actual FormMapping we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> taskName to be:\n  <%s>\n but was:\n  <%s>", actual, taskName, actual.getTaskName());

        // check
        if (!actual.getTaskName().equals(taskName)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual FormMapping's url is equal to the given one.
     * 
     * @param url the given url to compare the actual FormMapping's url to.
     * @return this assertion object.
     * @throws AssertionError - if the actual FormMapping's url is not equal to the given one.
     */
    public FormMappingAssert hasUrl(final String url) {
        // check that actual FormMapping we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        final String errorMessage = format("\nExpected <%s> url to be:\n  <%s>\n but was:\n  <%s>", actual, url, actual.getUrl());

        // check
        if (!actual.getUrl().equals(url)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
