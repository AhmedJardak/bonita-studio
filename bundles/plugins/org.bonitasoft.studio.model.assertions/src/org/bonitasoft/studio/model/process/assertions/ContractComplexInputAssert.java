package org.bonitasoft.studio.model.process.assertions;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;
import org.bonitasoft.studio.model.process.ContractComplexInput;
import org.bonitasoft.studio.model.process.ContractInput;

/**
 * {@link ContractComplexInput} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ContractComplexInputAssert extends AbstractAssert<ContractComplexInputAssert, ContractComplexInput> {

    /**
     * Creates a new </code>{@link ContractComplexInputAssert}</code> to make assertions on actual ContractComplexInput.
     * @param actual the ContractComplexInput we want to make assertions on.
     */
    public ContractComplexInputAssert(ContractComplexInput actual) {
        super(actual, ContractComplexInputAssert.class);
    }

    /**
     * An entry point for ContractComplexInputAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myContractComplexInput)</code> and get specific assertion with code completion.
     * @param actual the ContractComplexInput we want to make assertions on.
     * @return a new </code>{@link ContractComplexInputAssert}</code>
     */
    public static ContractComplexInputAssert assertThat(ContractComplexInput actual) {
        return new ContractComplexInputAssert(actual);
    }

    /**
     * Verifies that the actual ContractComplexInput's inputs contains the given ContractInput elements.
     * @param inputs the given elements that should be contained in actual ContractComplexInput's inputs.
     * @return this assertion object.
     * @throws AssertionError if the actual ContractComplexInput's inputs does not contain all given ContractInput elements.
     */
    public ContractComplexInputAssert hasInputs(ContractInput... inputs) {
        // check that actual ContractComplexInput we want to make assertions on is not null.
        isNotNull();

        // check that given ContractInput varargs is not null.
        if (inputs == null)
            throw new AssertionError("Expecting inputs parameter not to be null.");

        // check with standard error message (see commented below to set your own message).
        Assertions.assertThat(actual.getInputs()).contains(inputs);

        // uncomment the 4 lines below if you want to build your own error message :
        // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
        // String errorMessage = "my error message";
        // assertionInfo.overridingErrorMessage(errorMessage);
        // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ContractComplexInput has no inputs.
     * @return this assertion object.
     * @throws AssertionError if the actual ContractComplexInput's inputs is not empty.
     */
    public ContractComplexInputAssert hasNoInputs() {
        // check that actual ContractComplexInput we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("\nExpected :\n  <%s>\nnot to have inputs but had :\n  <%s>", actual, actual.getInputs());

        // check
        if (!actual.getInputs().isEmpty())
            throw new AssertionError(errorMessage);

        // return the current assertion for method chaining
        return this;
    }

}
