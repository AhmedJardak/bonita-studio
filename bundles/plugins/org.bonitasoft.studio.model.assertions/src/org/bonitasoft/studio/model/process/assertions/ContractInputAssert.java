package org.bonitasoft.studio.model.process.assertions;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.bonitasoft.studio.model.process.ContractInput;
import org.bonitasoft.studio.model.process.ContractInputType;

/**
 * {@link ContractInput} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ContractInputAssert extends AbstractAssert<ContractInputAssert, ContractInput> {

    /**
     * Creates a new </code>{@link ContractInputAssert}</code> to make assertions on actual ContractInput.
     * @param actual the ContractInput we want to make assertions on.
     */
    public ContractInputAssert(ContractInput actual) {
        super(actual, ContractInputAssert.class);
    }

    /**
     * An entry point for ContractInputAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
     * With a static import, one's can write directly : <code>assertThat(myContractInput)</code> and get specific assertion with code completion.
     * @param actual the ContractInput we want to make assertions on.
     * @return a new </code>{@link ContractInputAssert}</code>
     */
    public static ContractInputAssert assertThat(ContractInput actual) {
        return new ContractInputAssert(actual);
    }

    /**
     * Verifies that the actual ContractInput's description is equal to the given one.
     * @param description the given description to compare the actual ContractInput's description to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ContractInput's description is not equal to the given one.
     */
    public ContractInputAssert hasDescription(String description) {
        // check that actual ContractInput we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("\nExpected <%s> description to be:\n  <%s>\n but was:\n  <%s>", actual, description, actual.getDescription());

        // check
        if (!actual.getDescription().equals(description)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ContractInput's name is equal to the given one.
     * @param name the given name to compare the actual ContractInput's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ContractInput's name is not equal to the given one.
     */
    public ContractInputAssert hasName(String name) {
        // check that actual ContractInput we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("\nExpected <%s> name to be:\n  <%s>\n but was:\n  <%s>", actual, name, actual.getName());

        // check
        if (!actual.getName().equals(name)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

    /**
     * Verifies that the actual ContractInput's type is equal to the given one.
     * @param type the given type to compare the actual ContractInput's type to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ContractInput's type is not equal to the given one.
     */
    public ContractInputAssert hasType(ContractInputType type) {
        // check that actual ContractInput we want to make assertions on is not null.
        isNotNull();

        // we overrides the default error message with a more explicit one
        String errorMessage = format("\nExpected <%s> type to be:\n  <%s>\n but was:\n  <%s>", actual, type, actual.getType());

        // check
        if (!actual.getType().equals(type)) {
            throw new AssertionError(errorMessage);
        }

        // return the current assertion for method chaining
        return this;
    }

}
