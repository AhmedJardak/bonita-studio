diff --git a/patched-plugins/org.eclipse.emf.edapt.migration/generated-src/org/eclipse/emf/edapt/spi/migration/impl/InstanceImpl.java b/patched-plugins/org.eclipse.emf.edapt.migration/generated-src/org/eclipse/emf/edapt/spi/migration/impl/InstanceImpl.java
index 53ce393..79eb042 100644
--- a/patched-plugins/org.eclipse.emf.edapt.migration/generated-src/org/eclipse/emf/edapt/spi/migration/impl/InstanceImpl.java
+++ b/patched-plugins/org.eclipse.emf.edapt.migration/generated-src/org/eclipse/emf/edapt/spi/migration/impl/InstanceImpl.java
@@ -27,9 +27,12 @@
 import org.eclipse.emf.ecore.EAttribute;
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EClassifier;
+import org.eclipse.emf.ecore.EDataType;
+import org.eclipse.emf.ecore.EEnum;
 import org.eclipse.emf.ecore.EObject;
 import org.eclipse.emf.ecore.EReference;
 import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipse.emf.ecore.EcorePackage;
 import org.eclipse.emf.ecore.InternalEObject;
 import org.eclipse.emf.ecore.impl.EClassImpl;
 import org.eclipse.emf.ecore.impl.ENotificationImpl;
@@ -99,7 +102,7 @@
 	/**
 	 * The default value of the '{@link #getUri() <em>Uri</em>}' attribute. <!--
 	 * begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @see #getUri()
 	 * @generated
 	 * @ordered
@@ -109,7 +112,7 @@
 	/**
 	 * The cached value of the '{@link #getUri() <em>Uri</em>}' attribute. <!--
 	 * begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @see #getUri()
 	 * @generated
 	 * @ordered
@@ -155,7 +158,8 @@
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public EList<Slot> getSlots() {
+	@Override
+    public EList<Slot> getSlots() {
 		if (slots == null) {
 			slots = new EObjectContainmentWithInverseEList<Slot>(Slot.class, this, MigrationPackage.INSTANCE__SLOTS, MigrationPackage.SLOT__INSTANCE);
 		}
@@ -166,8 +170,11 @@
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public Type getType() {
-		if (eContainerFeatureID() != MigrationPackage.INSTANCE__TYPE) return null;
+	@Override
+    public Type getType() {
+		if (eContainerFeatureID() != MigrationPackage.INSTANCE__TYPE) {
+            return null;
+        }
 		return (Type)eContainer();
 	}
 
@@ -175,7 +182,7 @@
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public NotificationChain basicSetType(Type newType, NotificationChain msgs) {
+	public NotificationChain basicSetType(final Type newType, NotificationChain msgs) {
 		msgs = eBasicSetContainer((InternalEObject)newType, MigrationPackage.INSTANCE__TYPE, msgs);
 		return msgs;
 	}
@@ -184,27 +191,35 @@
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public void setType(Type newType) {
-		if (newType != eInternalContainer() || (eContainerFeatureID() != MigrationPackage.INSTANCE__TYPE && newType != null)) {
-			if (EcoreUtil.isAncestor(this, (EObject)newType))
-				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
+	@Override
+    public void setType(final Type newType) {
+		if (newType != eInternalContainer() || eContainerFeatureID() != MigrationPackage.INSTANCE__TYPE && newType != null) {
+			if (EcoreUtil.isAncestor(this, (EObject)newType)) {
+                throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
+            }
 			NotificationChain msgs = null;
-			if (eInternalContainer() != null)
-				msgs = eBasicRemoveFromContainer(msgs);
-			if (newType != null)
+			if (eInternalContainer() != null) {
+                msgs = eBasicRemoveFromContainer(msgs);
+            }
+			if (newType != null) {
 				msgs = ((InternalEObject)newType).eInverseAdd(this, MigrationPackage.TYPE__INSTANCES, Type.class, msgs);
+			}
 			msgs = basicSetType(newType, msgs);
-			if (msgs != null) msgs.dispatch();
+			if (msgs != null) {
+				msgs.dispatch();
+			}
 		}
-		else if (eNotificationRequired())
+		else if (eNotificationRequired()) {
 			eNotify(new ENotificationImpl(this, Notification.SET, MigrationPackage.INSTANCE__TYPE, newType, newType));
+		}
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public EList<ReferenceSlot> getReferences() {
+	@Override
+    public EList<ReferenceSlot> getReferences() {
 		if (references == null) {
 			references = new EObjectWithInverseResolvingEList.ManyInverse<ReferenceSlot>(ReferenceSlot.class, this, MigrationPackage.INSTANCE__REFERENCES, MigrationPackage.REFERENCE_SLOT__VALUES);
 		}
@@ -215,7 +230,8 @@
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public URI getUri() {
+	@Override
+    public URI getUri() {
 		return uri;
 	}
 
@@ -223,18 +239,21 @@
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public void setUri(URI newUri) {
-		URI oldUri = uri;
+	@Override
+    public void setUri(final URI newUri) {
+		final URI oldUri = uri;
 		uri = newUri;
-		if (eNotificationRequired())
-			eNotify(new ENotificationImpl(this, Notification.SET, MigrationPackage.INSTANCE__URI, oldUri, uri));
+		if (eNotificationRequired()) {
+            eNotify(new ENotificationImpl(this, Notification.SET, MigrationPackage.INSTANCE__URI, oldUri, uri));
+        }
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public String getUuid() {
+	@Override
+    public String getUuid() {
 		return uuid;
 	}
 
@@ -242,19 +261,22 @@
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
 	 * @generated
 	 */
-	public void setUuid(String newUuid) {
-		String oldUuid = uuid;
+	@Override
+    public void setUuid(final String newUuid) {
+		final String oldUuid = uuid;
 		uuid = newUuid;
-		if (eNotificationRequired())
-			eNotify(new ENotificationImpl(this, Notification.SET, MigrationPackage.INSTANCE__UUID, oldUuid, uuid));
+		if (eNotificationRequired()) {
+            eNotify(new ENotificationImpl(this, Notification.SET, MigrationPackage.INSTANCE__UUID, oldUuid, uuid));
+        }
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public <V> V get(EStructuralFeature feature) {
+	@Override
+    public <V> V get(final EStructuralFeature feature) {
 		if (feature instanceof EAttribute) {
 			return this.getAttributeValue((EAttribute) feature);
 		} else if (feature instanceof EReference) {
@@ -265,23 +287,29 @@
 
 	/**
 	 * Get the value of an instance's attribute
-	 * 
+	 *
 	 * @param <V>
 	 * @param attribute
 	 * @return Value
 	 */
 	@SuppressWarnings("unchecked")
-	private <V> V getAttributeValue(EAttribute attribute) {
-		Slot slot = this.getSlot(attribute);
+	private <V> V getAttributeValue(final EAttribute attribute) {
+		final Slot slot = getSlot(attribute);
 		if (slot == null) {
 			if (attribute.isMany()) {
+				return (V) new UpdatingList(this, attribute);
+			} else if (attribute.getEType().getInstanceClass() != null && Collection.class.isAssignableFrom(attribute.getEType().getInstanceClass())) {//Patch for Notation model
+				return (V) new UpdatingList(this, attribute);
+			}else if(attribute.getEType() instanceof EEnum){
+				return (V) attribute.getDefaultValue();
+			}else if(attribute.getEType() instanceof EDataType && attribute.getEType().getInstanceClass() == null){
 				return (V) new UpdatingList(this, attribute);
 			} else if (attribute.getDefaultValue() != null) {
 				return (V) attribute.getDefaultValue();
 			}
 			return null;
 		}
-		EList<Object> values = new UpdatingList(this, attribute,
+		final EList<Object> values = new UpdatingList(this, attribute,
 				((AttributeSlot) slot).getValues());
 		if (attribute.isMany()) {
 			return (V) values;
@@ -293,14 +321,14 @@
 
 	/**
 	 * Get the value of an instance's reference
-	 * 
+	 *
 	 * @param <V>
 	 * @param reference
 	 * @return Value
 	 */
 	@SuppressWarnings("unchecked")
-	<V> V getReferenceValue(EReference reference) {
-		Slot slot = this.getSlot(reference);
+	<V> V getReferenceValue(final EReference reference) {
+		final Slot slot = getSlot(reference);
 		if (slot == null) {
 			if (reference.isMany()) {
 				return (V) new UpdatingList(this, reference);
@@ -309,7 +337,7 @@
 			}
 			return null;
 		}
-		EList<Instance> values = new UpdatingList(this, reference,
+		final EList<Instance> values = new UpdatingList(this, reference,
 				((ReferenceSlot) slot).getValues());
 		if (reference.isMany()) {
 			return (V) values;
@@ -321,44 +349,79 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void set(EStructuralFeature feature, Object newValue) {
+	@Override
+    public void set(final EStructuralFeature feature, final Object newValue) {
 		if (feature.isMany()) {
-			Collection<?> oldValues = (Collection<?>) this.get(feature);
-			for (Object value : oldValues) {
+			final Collection<?> oldValues = (Collection<?>) this.get(feature);
+			for (final Object value : oldValues) {
 				this.remove(feature, value);
 			}
-			Collection<?> newValues = (Collection<?>) newValue;
-			for (Object value : newValues) {
+			final Collection<?> newValues = (Collection<?>) newValue;
+			for (final Object value : newValues) {
 				this.add(feature, value);
 			}
 		} else {
-			if (newValue instanceof List<?>) {
-				throw new IllegalArgumentException(
-						"Single value expected, but list found");
-			}
-			Object oldValue = this.get(feature);
-			if (oldValue != newValue) {
-				if (this.isSet(feature) && oldValue != null) {
-					this.remove(feature, oldValue);
+			//Bonita Patch for Notation model
+			if(newValue instanceof List<?> && feature.getEType() != null && feature.getEType().getInstanceClass() != null && Collection.class.isAssignableFrom(feature.getEType().getInstanceClass())){
+				final Object oldValue = this.get(feature);
+				if (oldValue != newValue) {
+					if (isSet(feature) && oldValue != null) {
+						this.remove(feature, oldValue);
+					}
+					if (newValue != null) {
+						this.add(feature, newValue);
+					}
 				}
-				if (newValue != null) {
-					this.add(feature, newValue);
+			}else if(newValue instanceof List<?> && feature.getEType() != null && feature.getEType().isInstance(EcorePackage.Literals.EJAVA_OBJECT)){
+				final Object oldValue = this.get(feature);
+				if (oldValue != newValue) {
+					if (isSet(feature) && oldValue != null) {
+						this.remove(feature, oldValue);
+					}
+					if (newValue != null) {
+						this.add(feature, newValue);
+					}
+				}
+			}else if(newValue instanceof List<?> && feature.getEType() != null && feature.getEType() instanceof EEnum){
+				final Object oldValue = this.get(feature);
+				if (oldValue != newValue) {
+					if (isSet(feature) && oldValue != null) {
+						this.remove(feature, oldValue);
+					}
+					if (newValue != null) {
+						this.add(feature, newValue);
+					}
+				}
+			}else{
+
+				if (newValue instanceof List<?>) {
+					throw new IllegalArgumentException(
+							"Single value expected, but list found");
+				}
+				final Object oldValue = this.get(feature);
+				if (oldValue != newValue) {
+					if (isSet(feature) && oldValue != null) {
+						this.remove(feature, oldValue);
+					}
+					if (newValue != null) {
+						this.add(feature, newValue);
+					}
 				}
 			}
 		}
-
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public Slot getSlot(EStructuralFeature feature) {
-		for (Slot slot : this.getSlots()) {
+	@Override
+    public Slot getSlot(final EStructuralFeature feature) {
+		for (final Slot slot : getSlots()) {
 			if (feature == slot.getEFeature()) {
 				return slot;
 			}
@@ -368,43 +431,45 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	@SuppressWarnings("unchecked")
-	public <V> V evaluate(String expression) throws MigrationException {
-		Model model = this.getType().getModel();
-		this.enableReflection();
+	@Override
+    @SuppressWarnings("unchecked")
+	public <V> V evaluate(final String expression) throws MigrationException {
+		final Model model = getType().getModel();
+		enableReflection();
 
 		OCL<?, EClassifier, ?, ?, ?, ?, ?, ?, ?, Constraint, EClass, EObject> ocl;
 		ocl = OCL.newInstance(EcoreEnvironmentFactory.INSTANCE);
-		OCLHelper<EClassifier, ?, ?, Constraint> helper = ocl.createOCLHelper();
+		final OCLHelper<EClassifier, ?, ?, Constraint> helper = ocl.createOCLHelper();
 
-		helper.setContext(this.eClass());
+		helper.setContext(eClass());
 		OCLExpression<EClassifier> query;
 		try {
 			query = helper.createQuery(expression);
-		} catch (ParserException e) {
+		} catch (final ParserException e) {
 			throw new MigrationException("OCL expression '" + expression
 					+ "' could not be parsed", e);
 		}
 		ocl.setExtentMap((Map) model.createExtentMap());
 
 		// create a Query to evaluate our query expression
-		Query<EClassifier, EClass, EObject> queryEval = ocl.createQuery(query);
-		Object result = queryEval.evaluate(this);
+		final Query<EClassifier, EClass, EObject> queryEval = ocl.createQuery(query);
+		final Object result = queryEval.evaluate(this);
 
-		this.disableReflection();
+		disableReflection();
 		return (V) result;
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public EReference getContainerReference() {
-		for (ReferenceSlot slot : this.getReferences()) {
+	@Override
+    public EReference getContainerReference() {
+		for (final ReferenceSlot slot : getReferences()) {
 			if (slot.getEReference().isContainment()) {
 				return slot.getEReference();
 			}
@@ -414,21 +479,22 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public ModelResource getResource() {
-		Model model = this.getType().getModel();
+	@Override
+    public ModelResource getResource() {
+		final Model model = getType().getModel();
 		Instance instance = this;
 		while (instance.getContainer() != null) {
-			for (ModelResource resource : model.getResources()) {
+			for (final ModelResource resource : model.getResources()) {
 				if (resource.getRootInstances().contains(instance)) {
 					return resource;
 				}
 			}
 			instance = instance.getContainer();
 		}
-		for (ModelResource resource : model.getResources()) {
+		for (final ModelResource resource : model.getResources()) {
 			if (resource.getRootInstances().contains(instance)) {
 				return resource;
 			}
@@ -438,26 +504,28 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public boolean isProxy() {
-		return this.getUri() != null;
+	@Override
+    public boolean isProxy() {
+		return getUri() != null;
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void migrate(String className) {
-		EClass eClass = checkAndGetClass(className);
+	@Override
+    public void migrate(final String className) {
+		final EClass eClass = checkAndGetClass(className);
 		migrate(eClass);
 	}
 
-	private EClass checkAndGetClass(String className) {
-		Metamodel metamodel = getType().getModel().getMetamodel();
-		EClass eClass = metamodel.getEClass(className);
+	private EClass checkAndGetClass(final String className) {
+		final Metamodel metamodel = getType().getModel().getMetamodel();
+		final EClass eClass = metamodel.getEClass(className);
 		if (eClass == null) {
 			throw new IllegalArgumentException("Class " + className + " not found.");
 		}
@@ -466,16 +534,17 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public EList<Instance> getInverse(String referenceName) {
-		EReference reference = checkAndGetReference(referenceName);
+	@Override
+    public EList<Instance> getInverse(final String referenceName) {
+		final EReference reference = checkAndGetReference(referenceName);
 		return getInverse(reference);
 	}
 
-	private EReference checkAndGetReference(String referenceName) {
-		EReference reference = getType().getModel().getMetamodel()
+	private EReference checkAndGetReference(final String referenceName) {
+		final EReference reference = getType().getModel().getMetamodel()
 				.getEReference(referenceName);
 		if (reference == null) {
 			throw new IllegalArgumentException("Reference " + referenceName + " not found.");
@@ -485,92 +554,101 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public Instance getLink(String referenceName) {
+	@Override
+    public Instance getLink(final String referenceName) {
 		return (Instance) get(referenceName);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public EList<Instance> getLinks(String referenceName) {
+	@Override
+    public EList<Instance> getLinks(final String referenceName) {
 		return (EList<Instance>) get(referenceName);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public boolean instanceOf(String className) {
-		EClass eClass = checkAndGetClass(className);
+	@Override
+    public boolean instanceOf(final String className) {
+		final EClass eClass = checkAndGetClass(className);
 		return instanceOf(eClass);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void add(String featureName, Object value) {
-		EStructuralFeature feature = checkAndGetFeature(featureName);
+	@Override
+    public void add(final String featureName, final Object value) {
+		final EStructuralFeature feature = checkAndGetFeature(featureName);
 		add(feature, value);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void remove(String featureName, Object value) {
-		EStructuralFeature feature = checkAndGetFeature(featureName);
+	@Override
+    public void remove(final String featureName, final Object value) {
+		final EStructuralFeature feature = checkAndGetFeature(featureName);
 		remove(feature, value);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void add(String featureName, int index, Object value) {
-		EStructuralFeature feature = checkAndGetFeature(featureName);
+	@Override
+    public void add(final String featureName, final int index, final Object value) {
+		final EStructuralFeature feature = checkAndGetFeature(featureName);
 		add(feature, index, value);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public Instance getLink(EReference reference) {
+	@Override
+    public Instance getLink(final EReference reference) {
 		return (Instance) get(reference);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public EList<Instance> getLinks(EReference reference) {
+	@Override
+    public EList<Instance> getLinks(final EReference reference) {
 		return (EList<Instance>) get(reference);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public Instance copy() {
+	@Override
+    public Instance copy() {
 
 		// mapping of originals to copies
-		Map<Instance, Instance> map = new HashMap<Instance, Instance>();
+		final Map<Instance, Instance> map = new HashMap<Instance, Instance>();
 
 		// copy tree structure
-		Instance copy = copyTree(this, map);
+		final Instance copy = copyTree(this, map);
 		// copy cross references
 		copyReferences(this, map);
 
@@ -578,24 +656,24 @@
 	}
 
 	/** Copy the tree structure with an instance as root. */
-	private Instance copyTree(Instance original, Map<Instance, Instance> map) {
-		EClass eClass = original.getEClass();
-		Instance copi = getType().getModel().newInstance(eClass);
-		for (EReference reference : eClass.getEAllReferences()) {
+	private Instance copyTree(final Instance original, final Map<Instance, Instance> map) {
+		final EClass eClass = original.getEClass();
+		final Instance copi = getType().getModel().newInstance(eClass);
+		for (final EReference reference : eClass.getEAllReferences()) {
 			if (reference.isContainment()) {
 				if (reference.isMany()) {
-					for (Instance child : original.getLinks(reference)) {
-						copi.add(reference, copyTree(child, map));
+					for (final Instance child : original.getLinks(reference)) {
+						copi.add(reference, child.copy());//Bonita Fix to copy references
 					}
 				} else {
-					Instance child = original.get(reference);
+					final Instance child = original.get(reference);
 					if (child != null) {
-						copi.set(reference, copyTree(child, map));
+						copi.set(reference, child.copy());//Bonita Fix to copy references
 					}
 				}
 			}
 		}
-		for (EAttribute attribute : eClass.getEAllAttributes()) {
+		for (final EAttribute attribute : eClass.getEAllAttributes()) {
 			copi.set(attribute, original.get(attribute));
 		}
 		map.put(original, copi);
@@ -603,10 +681,10 @@
 	}
 
 	/** Copy cross references of an instance. */
-	private void copyReferences(Instance original, Map<Instance, Instance> map) {
-		EClass eClass = original.getEClass();
-		Instance copi = map.get(original);
-		for (EReference reference : eClass.getEAllReferences()) {
+	private void copyReferences(final Instance original, final Map<Instance, Instance> map) {
+		final EClass eClass = original.getEClass();
+		final Instance copi = map.get(original);
+		for (final EReference reference : eClass.getEAllReferences()) {
 			if (!reference.isContainment()) {
 				if (reference.isMany()) {
 					if (reference.getEOpposite() == null
@@ -636,14 +714,15 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	@SuppressWarnings("unchecked")
-	public EList<Instance> getInverse(EReference reference) {
-		List<ReferenceSlot> slots = this.getReferences();
-		EList<Instance> instances = new BasicEList<Instance>();
-		for (ReferenceSlot slot : slots) {
+	@Override
+    @SuppressWarnings("unchecked")
+	public EList<Instance> getInverse(final EReference reference) {
+		final List<ReferenceSlot> slots = getReferences();
+		final EList<Instance> instances = new BasicEList<Instance>();
+		for (final ReferenceSlot slot : slots) {
 			if (reference == slot.getEReference()) {
 				instances.add(slot.getInstance());
 			}
@@ -653,27 +732,29 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void migrate(EClass eClass) {
-		Type oldType = this.getType();
+	@Override
+    public void migrate(final EClass eClass) {
+		final Type oldType = getType();
 		if (eClass != oldType.getEClass()) {
-			ModelImpl model = (ModelImpl) oldType.getModel();
+			final ModelImpl model = (ModelImpl) oldType.getModel();
 			model.removeDeleteType(oldType, this);
-			Type type = model.getCreateType(eClass);
+			final Type type = model.getCreateType(eClass);
 			type.getInstances().add(this);
 		}
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public <V> V unset(EStructuralFeature feature) {
-		V value = this.get(feature);
-		if (this.isSet(feature)) {
+	@Override
+    public <V> V unset(final EStructuralFeature feature) {
+		final V value = this.get(feature);
+		if (isSet(feature)) {
 			if (feature.isMany()) {
 				this.set(feature, Collections.EMPTY_LIST);
 			} else {
@@ -685,83 +766,82 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void add(EStructuralFeature feature, int index, Object value) {
+	@Override
+    public void add(final EStructuralFeature feature, final int index, final Object value) {
 		if (feature instanceof EAttribute) {
-			EAttribute attribute = (EAttribute) feature;
-			AttributeSlot attributeSlot = this
-					.getCreateAttributeSlot(attribute);
+			final EAttribute attribute = (EAttribute) feature;
+			final AttributeSlot attributeSlot = getCreateAttributeSlot(attribute);
 			if (!attribute.isUnique()
 					|| !attributeSlot.getValues().contains(value)) {
 				attributeSlot.getValues().add(index, value);
 			}
 		} else {
-			EReference reference = (EReference) feature;
-			Instance target = (Instance) value;
+			final EReference reference = (EReference) feature;
+			final Instance target = (Instance) value;
 			if (reference.isUnique() && contains(reference, target)) {
 				return;
 			}
-			EReference opposite = reference.getEOpposite();
+			final EReference opposite = reference.getEOpposite();
 			if (opposite != null && reference.eContainer() != null) {
 				// if opposite is single-valued, unset it before
 				if (!opposite.isMany()) {
 					target.unset(opposite);
 				}
-				ReferenceSlot oppositeSlot = ((InstanceImpl) target)
+				final ReferenceSlot oppositeSlot = ((InstanceImpl) target)
 						.getCreateReferenceSlot(opposite);
 				oppositeSlot.getValues().add(this);
 			}
-			ReferenceSlot referenceSlot = this
-					.getCreateReferenceSlot(reference);
+			final ReferenceSlot referenceSlot = getCreateReferenceSlot(reference);
 			referenceSlot.getValues().add(index, target);
 		}
 	}
 
 	/**
 	 * Get the slot for an instance's attribute (create one if there is none)
-	 * 
+	 *
 	 * @param attribute
 	 * @return Slot
 	 */
-	private AttributeSlot getCreateAttributeSlot(EAttribute attribute) {
+	private AttributeSlot getCreateAttributeSlot(final EAttribute attribute) {
 
-		AttributeSlot attributeSlot = (AttributeSlot) this.getSlot(attribute);
+		AttributeSlot attributeSlot = (AttributeSlot) getSlot(attribute);
 		if (attributeSlot == null) {
 			attributeSlot = MigrationFactory.eINSTANCE.createAttributeSlot();
 			attributeSlot.setEAttribute(attribute);
-			this.getSlots().add(attributeSlot);
+			getSlots().add(attributeSlot);
 		}
 		return attributeSlot;
 	}
 
 	/**
 	 * Get the slot for an instance's reference (create one if there is none)
-	 * 
+	 *
 	 * @param reference
 	 * @return Slot
 	 */
-	ReferenceSlot getCreateReferenceSlot(EReference reference) {
+	ReferenceSlot getCreateReferenceSlot(final EReference reference) {
 
-		ReferenceSlot referenceSlot = (ReferenceSlot) this.getSlot(reference);
+		ReferenceSlot referenceSlot = (ReferenceSlot) getSlot(reference);
 		if (referenceSlot == null) {
 			referenceSlot = MigrationFactory.eINSTANCE.createReferenceSlot();
 			referenceSlot.setEReference(reference);
-			this.getSlots().add(referenceSlot);
+			getSlots().add(referenceSlot);
 		}
 		return referenceSlot;
 	}
 
 	/**
 	 * Determine whether a value is contained in an instance's reference
-	 * 
+	 *
 	 * @param reference
 	 * @param value
 	 * @return true if it is contained, false otherwise
 	 */
-	private boolean contains(EReference reference, Instance value) {
-		ReferenceSlot referenceSlot = (ReferenceSlot) this.getSlot(reference);
+	private boolean contains(final EReference reference, final Instance value) {
+		final ReferenceSlot referenceSlot = (ReferenceSlot) getSlot(reference);
 		if (referenceSlot != null) {
 			return referenceSlot.getValues().contains(value);
 		}
@@ -770,12 +850,13 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void remove(EStructuralFeature feature, Object value) {
-		SlotImpl slot = (SlotImpl) this.getSlot(feature);
-		int index = slot != null ? slot.getValues().indexOf(value) : 0;
+	@Override
+    public void remove(final EStructuralFeature feature, final Object value) {
+		final SlotImpl slot = (SlotImpl) getSlot(feature);
+		final int index = slot != null ? slot.getValues().indexOf(value) : 0;
 		if (index >= 0) {
 			this.remove(feature, index);
 		}
@@ -783,36 +864,39 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public EClass getEClass() {
+	@Override
+    public EClass getEClass() {
 		return ((Instance) this).getType().getEClass();
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void validate() {
-		BasicDiagnostic chain = new BasicDiagnostic();
+	@Override
+    public void validate() {
+		final BasicDiagnostic chain = new BasicDiagnostic();
 		this.validate(chain);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public boolean validate(DiagnosticChain chain) {
-		final ModelValidator validator = new ModelValidator(this.getType()
+	@Override
+    public boolean validate(final DiagnosticChain chain) {
+		final ModelValidator validator = new ModelValidator(getType()
 				.getModel());
-		Diagnostician diagnostician = new Diagnostician() {
+		final Diagnostician diagnostician = new Diagnostician() {
 			@Override
-			public String getObjectLabel(EObject eObject) {
-				EClass eClass = eObject.eClass();
-				StringBuffer result = new StringBuffer(eClass.getName());
+			public String getObjectLabel(final EObject eObject) {
+				final EClass eClass = eObject.eClass();
+				final StringBuffer result = new StringBuffer(eClass.getName());
 				if (eClass.getInstanceClassName() == null) {
 					result.append('/');
 					result.append(eClass.getEPackage().getNsURI());
@@ -826,8 +910,8 @@
 			}
 
 			@Override
-			public boolean validate(EClass eClass, EObject eObject,
-					DiagnosticChain diagnostics, Map<Object, Object> context) {
+			public boolean validate(final EClass eClass, final EObject eObject,
+					final DiagnosticChain diagnostics, final Map<Object, Object> context) {
 				boolean result = validator.validate(eClass, eObject,
 						diagnostics, context);
 				if (result || diagnostics != null) {
@@ -836,9 +920,9 @@
 				return result;
 			}
 		};
-		this.enableReflection();
-		boolean result = diagnostician.validate(this, chain);
-		this.disableReflection();
+		enableReflection();
+		final boolean result = diagnostician.validate(this, chain);
+		disableReflection();
 		return result;
 	}
 
@@ -846,28 +930,29 @@
 	 * Disable reflection
 	 */
 	private void disableReflection() {
-		this.getType().getModel().setReflection(false);
+		getType().getModel().setReflection(false);
 	}
 
 	/**
 	 * Enable reflection
 	 */
 	private void enableReflection() {
-		this.getType().getModel().setReflection(true);
+		getType().getModel().setReflection(true);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public <V> V get(String featureName) {
-		EStructuralFeature feature = checkAndGetFeature(featureName);
+	@Override
+    public <V> V get(final String featureName) {
+		final EStructuralFeature feature = checkAndGetFeature(featureName);
 		return this.get(feature);
 	}
 
-	private EStructuralFeature checkAndGetFeature(String featureName) {
-		EStructuralFeature feature = this.getEClass().getEStructuralFeature(
+	private EStructuralFeature checkAndGetFeature(final String featureName) {
+		final EStructuralFeature feature = getEClass().getEStructuralFeature(
 				featureName);
 		if (feature == null) {
 			throw new IllegalArgumentException("Feature " + featureName + " not found.");
@@ -877,40 +962,44 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void set(String featureName, Object value) {
-		EStructuralFeature feature = checkAndGetFeature(featureName);
+	@Override
+    public void set(final String featureName, final Object value) {
+		final EStructuralFeature feature = checkAndGetFeature(featureName);
 		this.set(feature, value);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public boolean isSet(EStructuralFeature feature) {
-		return this.getSlot(feature) != null;
+	@Override
+    public boolean isSet(final EStructuralFeature feature) {
+		return getSlot(feature) != null;
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public boolean instanceOf(EClass eClass) {
-		return this.getEClass() == eClass
-				|| this.getEClass().getEAllSuperTypes().contains(eClass);
+	@Override
+    public boolean instanceOf(final EClass eClass) {
+		return getEClass() == eClass
+				|| getEClass().getEAllSuperTypes().contains(eClass);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public Instance getContainer() {
-		for (ReferenceSlot slot : this.getReferences()) {
+	@Override
+    public Instance getContainer() {
+		for (final ReferenceSlot slot : getReferences()) {
 			if (slot.getEReference().isContainment()) {
 				return slot.getInstance();
 			}
@@ -920,14 +1009,15 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public EList<Instance> getContents() {
-		EList<Instance> contents = new BasicEList<Instance>();
-		for (Slot slot : this.getSlots()) {
+	@Override
+    public EList<Instance> getContents() {
+		final EList<Instance> contents = new BasicEList<Instance>();
+		for (final Slot slot : getSlots()) {
 			if (slot instanceof ReferenceSlot) {
-				ReferenceSlot referenceSlot = (ReferenceSlot) slot;
+				final ReferenceSlot referenceSlot = (ReferenceSlot) slot;
 				if (referenceSlot.getEReference().isContainment()) {
 					contents.addAll(referenceSlot.getValues());
 				}
@@ -938,66 +1028,67 @@
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void add(EStructuralFeature feature, Object value) {
-		SlotImpl slot = (SlotImpl) this.getSlot(feature);
-		int index = slot != null ? slot.getValues().size() : 0;
+	@Override
+    public void add(final EStructuralFeature feature, final Object value) {
+		final SlotImpl slot = (SlotImpl) getSlot(feature);
+		final int index = slot != null ? slot.getValues().size() : 0;
 		this.add(feature, index, value);
 	}
 
 	/**
 	 * <!-- begin-user-doc --> <!-- end-user-doc -->
-	 * 
+	 *
 	 * @generated NOT
 	 */
-	public void remove(EStructuralFeature feature, int index) {
+	@Override
+    public void remove(final EStructuralFeature feature, final int index) {
 		if (feature instanceof EAttribute) {
-			EAttribute attribute = (EAttribute) feature;
-			this.removeDeleteAttribute(attribute, index);
+			final EAttribute attribute = (EAttribute) feature;
+			removeDeleteAttribute(attribute, index);
 		} else {
-			EReference reference = (EReference) feature;
-			EReference opposite = reference.getEOpposite();
+			final EReference reference = (EReference) feature;
+			final EReference opposite = reference.getEOpposite();
 			if (opposite != null && reference.eContainer() != null) {
-				ReferenceSlot referenceSlot = (ReferenceSlot) this
-						.getSlot(reference);
-				Instance target = referenceSlot.getValues().get(index);
-				int oppositeIndex = ((ReferenceSlot) target.getSlot(opposite))
+				final ReferenceSlot referenceSlot = (ReferenceSlot) getSlot(reference);
+				final Instance target = referenceSlot.getValues().get(index);
+				final int oppositeIndex = ((ReferenceSlot) target.getSlot(opposite))
 						.getValues().indexOf(this);
 				((InstanceImpl) target).removeDeleteReference(opposite,
 						oppositeIndex);
 			}
-			this.removeDeleteReference(reference, index);
+			removeDeleteReference(reference, index);
 		}
 	}
 
 	/**
 	 * Remove a value from an instance's attribute (delete slot if it is empty)
-	 * 
+	 *
 	 * @param attribute
 	 * @param index
 	 */
-	private void removeDeleteAttribute(EAttribute attribute, int index) {
-		AttributeSlot attributeSlot = (AttributeSlot) this.getSlot(attribute);
+	private void removeDeleteAttribute(final EAttribute attribute, final int index) {
+		final AttributeSlot attributeSlot = (AttributeSlot) getSlot(attribute);
 		attributeSlot.getValues().remove(index);
 		if (attributeSlot.getValues().isEmpty()) {
-			this.getSlots().remove(attributeSlot);
+			getSlots().remove(attributeSlot);
 		}
 	}
 
 	/**
 	 * Remove a value from an instance's reference (delete slot if it is empty)
-	 * 
+	 *
 	 * @param reference
 	 * @param index
 	 */
-	void removeDeleteReference(EReference reference, int index) {
+	void removeDeleteReference(final EReference reference, final int index) {
 
-		ReferenceSlot referenceSlot = (ReferenceSlot) this.getSlot(reference);
+		final ReferenceSlot referenceSlot = (ReferenceSlot) getSlot(reference);
 		referenceSlot.getValues().remove(index);
 		if (referenceSlot.getValues().isEmpty()) {
-			this.getSlots().remove(referenceSlot);
+			getSlots().remove(referenceSlot);
 		}
 	}
 
@@ -1007,17 +1098,18 @@
 	 */
 	@SuppressWarnings("unchecked")
 	@Override
-	public NotificationChain eInverseAdd(InternalEObject otherEnd,
-			int featureID, NotificationChain msgs) {
+	public NotificationChain eInverseAdd(final InternalEObject otherEnd,
+			final int featureID, NotificationChain msgs) {
 		switch (featureID) {
-			case MigrationPackage.INSTANCE__SLOTS:
-				return ((InternalEList<InternalEObject>)(InternalEList<?>)getSlots()).basicAdd(otherEnd, msgs);
-			case MigrationPackage.INSTANCE__TYPE:
-				if (eInternalContainer() != null)
-					msgs = eBasicRemoveFromContainer(msgs);
-				return basicSetType((Type)otherEnd, msgs);
-			case MigrationPackage.INSTANCE__REFERENCES:
-				return ((InternalEList<InternalEObject>)(InternalEList<?>)getReferences()).basicAdd(otherEnd, msgs);
+		case MigrationPackage.INSTANCE__SLOTS:
+			return ((InternalEList<InternalEObject>)(InternalEList<?>)getSlots()).basicAdd(otherEnd, msgs);
+		case MigrationPackage.INSTANCE__TYPE:
+			if (eInternalContainer() != null) {
+                msgs = eBasicRemoveFromContainer(msgs);
+            }
+			return basicSetType((Type)otherEnd, msgs);
+		case MigrationPackage.INSTANCE__REFERENCES:
+			return ((InternalEList<InternalEObject>)(InternalEList<?>)getReferences()).basicAdd(otherEnd, msgs);
 		}
 		return super.eInverseAdd(otherEnd, featureID, msgs);
 	}
@@ -1027,15 +1119,15 @@
 	 * @generated
 	 */
 	@Override
-	public NotificationChain eInverseRemove(InternalEObject otherEnd,
-			int featureID, NotificationChain msgs) {
+	public NotificationChain eInverseRemove(final InternalEObject otherEnd,
+			final int featureID, final NotificationChain msgs) {
 		switch (featureID) {
-			case MigrationPackage.INSTANCE__SLOTS:
-				return ((InternalEList<?>)getSlots()).basicRemove(otherEnd, msgs);
-			case MigrationPackage.INSTANCE__TYPE:
-				return basicSetType(null, msgs);
-			case MigrationPackage.INSTANCE__REFERENCES:
-				return ((InternalEList<?>)getReferences()).basicRemove(otherEnd, msgs);
+		case MigrationPackage.INSTANCE__SLOTS:
+			return ((InternalEList<?>)getSlots()).basicRemove(otherEnd, msgs);
+		case MigrationPackage.INSTANCE__TYPE:
+			return basicSetType(null, msgs);
+		case MigrationPackage.INSTANCE__REFERENCES:
+			return ((InternalEList<?>)getReferences()).basicRemove(otherEnd, msgs);
 		}
 		return super.eInverseRemove(otherEnd, featureID, msgs);
 	}
@@ -1046,10 +1138,10 @@
 	 */
 	@Override
 	public NotificationChain eBasicRemoveFromContainerFeature(
-			NotificationChain msgs) {
+			final NotificationChain msgs) {
 		switch (eContainerFeatureID()) {
-			case MigrationPackage.INSTANCE__TYPE:
-				return eInternalContainer().eInverseRemove(this, MigrationPackage.TYPE__INSTANCES, Type.class, msgs);
+		case MigrationPackage.INSTANCE__TYPE:
+			return eInternalContainer().eInverseRemove(this, MigrationPackage.TYPE__INSTANCES, Type.class, msgs);
 		}
 		return super.eBasicRemoveFromContainerFeature(msgs);
 	}
@@ -1059,18 +1151,18 @@
 	 * @generated
 	 */
 	@Override
-	public Object eGet(int featureID, boolean resolve, boolean coreType) {
+	public Object eGet(final int featureID, final boolean resolve, final boolean coreType) {
 		switch (featureID) {
-			case MigrationPackage.INSTANCE__SLOTS:
-				return getSlots();
-			case MigrationPackage.INSTANCE__TYPE:
-				return getType();
-			case MigrationPackage.INSTANCE__REFERENCES:
-				return getReferences();
-			case MigrationPackage.INSTANCE__URI:
-				return getUri();
-			case MigrationPackage.INSTANCE__UUID:
-				return getUuid();
+		case MigrationPackage.INSTANCE__SLOTS:
+			return getSlots();
+		case MigrationPackage.INSTANCE__TYPE:
+			return getType();
+		case MigrationPackage.INSTANCE__REFERENCES:
+			return getReferences();
+		case MigrationPackage.INSTANCE__URI:
+			return getUri();
+		case MigrationPackage.INSTANCE__UUID:
+			return getUuid();
 		}
 		return super.eGet(featureID, resolve, coreType);
 	}
@@ -1081,25 +1173,25 @@
 	 */
 	@SuppressWarnings("unchecked")
 	@Override
-	public void eSet(int featureID, Object newValue) {
+	public void eSet(final int featureID, final Object newValue) {
 		switch (featureID) {
-			case MigrationPackage.INSTANCE__SLOTS:
-				getSlots().clear();
-				getSlots().addAll((Collection<? extends Slot>)newValue);
-				return;
-			case MigrationPackage.INSTANCE__TYPE:
-				setType((Type)newValue);
-				return;
-			case MigrationPackage.INSTANCE__REFERENCES:
-				getReferences().clear();
-				getReferences().addAll((Collection<? extends ReferenceSlot>)newValue);
-				return;
-			case MigrationPackage.INSTANCE__URI:
-				setUri((URI)newValue);
-				return;
-			case MigrationPackage.INSTANCE__UUID:
-				setUuid((String)newValue);
-				return;
+		case MigrationPackage.INSTANCE__SLOTS:
+			getSlots().clear();
+			getSlots().addAll((Collection<? extends Slot>)newValue);
+			return;
+		case MigrationPackage.INSTANCE__TYPE:
+			setType((Type)newValue);
+			return;
+		case MigrationPackage.INSTANCE__REFERENCES:
+			getReferences().clear();
+			getReferences().addAll((Collection<? extends ReferenceSlot>)newValue);
+			return;
+		case MigrationPackage.INSTANCE__URI:
+			setUri((URI)newValue);
+			return;
+		case MigrationPackage.INSTANCE__UUID:
+			setUuid((String)newValue);
+			return;
 		}
 		super.eSet(featureID, newValue);
 	}
@@ -1109,23 +1201,23 @@
 	 * @generated
 	 */
 	@Override
-	public void eUnset(int featureID) {
+	public void eUnset(final int featureID) {
 		switch (featureID) {
-			case MigrationPackage.INSTANCE__SLOTS:
-				getSlots().clear();
-				return;
-			case MigrationPackage.INSTANCE__TYPE:
-				setType((Type)null);
-				return;
-			case MigrationPackage.INSTANCE__REFERENCES:
-				getReferences().clear();
-				return;
-			case MigrationPackage.INSTANCE__URI:
-				setUri(URI_EDEFAULT);
-				return;
-			case MigrationPackage.INSTANCE__UUID:
-				setUuid(UUID_EDEFAULT);
-				return;
+		case MigrationPackage.INSTANCE__SLOTS:
+			getSlots().clear();
+			return;
+		case MigrationPackage.INSTANCE__TYPE:
+			setType((Type)null);
+			return;
+		case MigrationPackage.INSTANCE__REFERENCES:
+			getReferences().clear();
+			return;
+		case MigrationPackage.INSTANCE__URI:
+			setUri(URI_EDEFAULT);
+			return;
+		case MigrationPackage.INSTANCE__UUID:
+			setUuid(UUID_EDEFAULT);
+			return;
 		}
 		super.eUnset(featureID);
 	}
@@ -1135,18 +1227,18 @@
 	 * @generated
 	 */
 	@Override
-	public boolean eIsSet(int featureID) {
+	public boolean eIsSet(final int featureID) {
 		switch (featureID) {
-			case MigrationPackage.INSTANCE__SLOTS:
-				return slots != null && !slots.isEmpty();
-			case MigrationPackage.INSTANCE__TYPE:
-				return getType() != null;
-			case MigrationPackage.INSTANCE__REFERENCES:
-				return references != null && !references.isEmpty();
-			case MigrationPackage.INSTANCE__URI:
-				return URI_EDEFAULT == null ? uri != null : !URI_EDEFAULT.equals(uri);
-			case MigrationPackage.INSTANCE__UUID:
-				return UUID_EDEFAULT == null ? uuid != null : !UUID_EDEFAULT.equals(uuid);
+		case MigrationPackage.INSTANCE__SLOTS:
+			return slots != null && !slots.isEmpty();
+		case MigrationPackage.INSTANCE__TYPE:
+			return getType() != null;
+		case MigrationPackage.INSTANCE__REFERENCES:
+			return references != null && !references.isEmpty();
+		case MigrationPackage.INSTANCE__URI:
+			return URI_EDEFAULT == null ? uri != null : !URI_EDEFAULT.equals(uri);
+		case MigrationPackage.INSTANCE__UUID:
+			return UUID_EDEFAULT == null ? uuid != null : !UUID_EDEFAULT.equals(uuid);
 		}
 		return super.eIsSet(featureID);
 	}
@@ -1157,9 +1249,11 @@
 	 */
 	@Override
 	public String toString() {
-		if (eIsProxy()) return super.toString();
+		if (eIsProxy()) {
+            return super.toString();
+        }
 
-		StringBuffer result = new StringBuffer();
+		final StringBuffer result = new StringBuffer();
 		result.append("Instance of ");
 		result.append(getType().getEClass().getName());
 		if(getUri() != null) {
@@ -1187,8 +1281,8 @@
 	 * {@inheritDoc}
 	 */
 	@Override
-	public Object eGet(EStructuralFeature feature, boolean resolve,
-			boolean coreType) {
+	public Object eGet(final EStructuralFeature feature, final boolean resolve,
+			final boolean coreType) {
 		if (getType().getModel().isReflection()) {
 			return get(feature);
 		}
@@ -1199,7 +1293,7 @@
 	 * {@inheritDoc}
 	 */
 	@Override
-	public boolean eIsSet(EStructuralFeature feature) {
+	public boolean eIsSet(final EStructuralFeature feature) {
 		if (getType().getModel().isReflection()) {
 			return getSlot(feature) != null;
 		}
@@ -1212,7 +1306,7 @@
 	@Override
 	public EList<EObject> eContents() {
 		if (getType().getModel().isReflection()) {
-			EStructuralFeature[] features = ((EClassImpl.FeatureSubsetSupplier) getEClass()
+			final EStructuralFeature[] features = ((EClassImpl.FeatureSubsetSupplier) getEClass()
 					.getEAllStructuralFeatures()).containments();
 			return new EContentsEList<EObject>(this, features);
 		}
@@ -1225,7 +1319,7 @@
 	@Override
 	public EList<EObject> eCrossReferences() {
 		if (getType().getModel().isReflection()) {
-			EStructuralFeature[] features = ((EClassImpl.FeatureSubsetSupplier) getEClass()
+			final EStructuralFeature[] features = ((EClassImpl.FeatureSubsetSupplier) getEClass()
 					.getEAllStructuralFeatures()).crossReferences();
 			return new EContentsEList<EObject>(this, features);
 		}