diff --git a/patched-plugins/org.eclipse.ui.views.properties.tabbed/META-INF/MANIFEST.MF b/patched-plugins/org.eclipse.ui.views.properties.tabbed/META-INF/MANIFEST.MF
index 04cf4e9..467918b 100644
--- a/patched-plugins/org.eclipse.ui.views.properties.tabbed/META-INF/MANIFEST.MF
+++ b/patched-plugins/org.eclipse.ui.views.properties.tabbed/META-INF/MANIFEST.MF
@@ -10,11 +10,13 @@
  4784c187c4062
 Bundle-Activator: org.eclipse.ui.internal.views.properties.tabbed.Tabb
  edPropertyViewPlugin
-Require-Bundle: org.eclipse.ui.forms;bundle-version="[3.3.0,4.0.0)";vi
- sibility:=reexport,org.eclipse.ui.views;bundle-version="[3.2.0,4.0.0)
- ";visibility:=reexport,org.eclipse.ui;bundle-version="[3.3.0,4.0.0)";
- visibility:=reexport,org.eclipse.core.runtime;bundle-version="[3.2.0,
- 4.0.0)"
+Require-Bundle: org.eclipse.ui.forms;bundle-version="[3.3.0,4.0.0)";visibility:=reexport,
+ org.eclipse.ui.views;bundle-version="[3.2.0,4.0.0)";visibility:=reexport,
+ org.eclipse.ui;bundle-version="[3.3.0,4.0.0)";visibility:=reexport,
+ org.eclipse.core.runtime;bundle-version="[3.2.0,4.0.0)",
+ org.eclipse.e4.core.contexts;bundle-version="1.3.100",
+ org.eclipse.e4.ui.workbench;bundle-version="1.2.1",
+ org.eclipse.e4.core.di;bundle-version="1.4.0"
 Export-Package: org.eclipse.ui.internal.views.properties.tabbed;x-inte
  rnal:=true,org.eclipse.ui.internal.views.properties.tabbed.l10n;x-int
  ernal:=true,org.eclipse.ui.internal.views.properties.tabbed.view;x-in
diff --git a/patched-plugins/org.eclipse.ui.views.properties.tabbed/src/org/eclipse/ui/internal/views/properties/tabbed/view/SectionDescriptor.java b/patched-plugins/org.eclipse.ui.views.properties.tabbed/src/org/eclipse/ui/internal/views/properties/tabbed/view/SectionDescriptor.java
index 5489912..534ca8b 100644
--- a/patched-plugins/org.eclipse.ui.views.properties.tabbed/src/org/eclipse/ui/internal/views/properties/tabbed/view/SectionDescriptor.java
+++ b/patched-plugins/org.eclipse.ui.views.properties.tabbed/src/org/eclipse/ui/internal/views/properties/tabbed/view/SectionDescriptor.java
@@ -4,9 +4,8 @@
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
- * 
  * Contributors:
- *     IBM Corporation - initial API and implementation
+ * IBM Corporation - initial API and implementation
  *******************************************************************************/
 package org.eclipse.ui.internal.views.properties.tabbed.view;
 
@@ -16,8 +15,14 @@
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.InvalidRegistryObjectException;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.Status;
+import org.eclipse.e4.core.contexts.ContextInjectionFactory;
+import org.eclipse.e4.core.di.InjectionException;
 import org.eclipse.jface.viewers.IFilter;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.internal.Workbench;
 import org.eclipse.ui.internal.views.properties.tabbed.TabbedPropertyViewPlugin;
 import org.eclipse.ui.internal.views.properties.tabbed.TabbedPropertyViewStatusCodes;
 import org.eclipse.ui.internal.views.properties.tabbed.l10n.TabbedPropertyMessages;
@@ -31,198 +36,210 @@
  * Represents the default implementation of a section descriptor on the tabbed
  * property sections extensions. This implementation assumes that we are
  * interested in selected objects in an IStructuredSelection.
- * 
+ *
  * @author Anthony Hunter
  */
 public class SectionDescriptor extends AbstractSectionDescriptor {
 
-	private static final String ATT_ID = "id"; //$NON-NLS-1$
+    private static final String ATT_ID = "id"; //$NON-NLS-1$
 
-	private static final String ATT_TARGET_TAB = "tab"; //$NON-NLS-1$
+    private static final String ATT_TARGET_TAB = "tab"; //$NON-NLS-1$
 
-	private static final String ATT_AFTER_SECTION = "afterSection"; //$NON-NLS-1$
+    private static final String ATT_AFTER_SECTION = "afterSection"; //$NON-NLS-1$
 
-	private static final String ATT_CLASS = "class"; //$NON-NLS-1$
+    private static final String ATT_CLASS = "class"; //$NON-NLS-1$
 
-	private static final String ATT_SECTION_FILTER = "filter"; //$NON-NLS-1$	
+    private static final String ATT_SECTION_FILTER = "filter"; //$NON-NLS-1$
 
-	private static final String ATT_SECTION_ENABLES_FOR = "enablesFor"; //$NON-NLS-1$	
+    private static final String ATT_SECTION_ENABLES_FOR = "enablesFor"; //$NON-NLS-1$
 
-	private static final String ATT_INPUT_TYPE = "type"; //$NON-NLS-1$
+    private static final String ATT_INPUT_TYPE = "type"; //$NON-NLS-1$
 
-	private static final String ELEMENT_INPUT = "input"; //$NON-NLS-1$
+    private static final String ELEMENT_INPUT = "input"; //$NON-NLS-1$
 
-	private String id;
+    private final String id;
 
-	private String targetTab;
+    private final String targetTab;
 
-	private String afterSection;
+    private final String afterSection;
 
-	private ArrayList inputTypes;
+    private ArrayList inputTypes;
 
-	private IFilter filter;
+    private IFilter filter;
 
-	private int enablesFor = ENABLES_FOR_ANY;
+    private int enablesFor = ENABLES_FOR_ANY;
 
-	private IConfigurationElement configurationElement;
+    private final IConfigurationElement configurationElement;
 
-	/**
-	 * Constructor for the section descriptor.
-	 * 
-	 * @param configurationElement
-	 *            the configuration element for the section descriptor.
-	 * @param typeMapper
-	 *            The type mapper.
-	 */
-	protected SectionDescriptor(IConfigurationElement configurationElement,
-			ITypeMapper typeMapper) {
-		super(typeMapper);
-		this.configurationElement = configurationElement;
+    /**
+     * Constructor for the section descriptor.
+     *
+     * @param configurationElement
+     *        the configuration element for the section descriptor.
+     * @param typeMapper
+     *        The type mapper.
+     */
+    protected SectionDescriptor(final IConfigurationElement configurationElement,
+            final ITypeMapper typeMapper) {
+        super(typeMapper);
+        this.configurationElement = configurationElement;
 
-		id = getConfigurationElement().getAttribute(ATT_ID);
-		targetTab = getConfigurationElement().getAttribute(ATT_TARGET_TAB);
-		afterSection = getConfigurationElement()
-				.getAttribute(ATT_AFTER_SECTION);
-		if (getConfigurationElement().getAttribute(ATT_SECTION_ENABLES_FOR) != null) {
-			String enablesForStr = getConfigurationElement().getAttribute(
-					ATT_SECTION_ENABLES_FOR);
-			int enablesForTest = Integer.parseInt(enablesForStr);
-			if (enablesForTest > 0) {
-				enablesFor = enablesForTest;
-			}
-		}
+        id = getConfigurationElement().getAttribute(ATT_ID);
+        targetTab = getConfigurationElement().getAttribute(ATT_TARGET_TAB);
+        afterSection = getConfigurationElement()
+                .getAttribute(ATT_AFTER_SECTION);
+        if (getConfigurationElement().getAttribute(ATT_SECTION_ENABLES_FOR) != null) {
+            final String enablesForStr = getConfigurationElement().getAttribute(
+                    ATT_SECTION_ENABLES_FOR);
+            final int enablesForTest = Integer.parseInt(enablesForStr);
+            if (enablesForTest > 0) {
+                enablesFor = enablesForTest;
+            }
+        }
 
-		if (id == null || targetTab == null) {
-			// the section id and tab are mandatory - log error
-			handleSectionError(null);
-		}
-	}
+        if (id == null || targetTab == null) {
+            // the section id and tab are mandatory - log error
+            handleSectionError(null);
+        }
+    }
 
-	/**
-	 * Handle the section error when an issue is found loading from the
-	 * configuration element.
-	 * 
-	 * @param exception
-	 *            an optional CoreException
-	 */
-	private void handleSectionError(CoreException exception) {
-		String pluginId = getConfigurationElement().getDeclaringExtension()
-				.getNamespaceIdentifier();
-		String message = TabbedPropertyMessages.SectionDescriptor_Section_error;
-		if (exception == null) {
-			message = MessageFormat.format(
-					TabbedPropertyMessages.SectionDescriptor_Section_error,
-					new Object[] { pluginId });
-		} else {
-			message = MessageFormat
-					.format(
-							TabbedPropertyMessages.SectionDescriptor_class_not_found_error,
-							new Object[] { pluginId });
-		}
-		IStatus status = new Status(IStatus.ERROR, pluginId,
-				TabbedPropertyViewStatusCodes.SECTION_ERROR, message, exception);
-		TabbedPropertyViewPlugin.getPlugin().getLog().log(status);
-	}
+    /**
+     * Handle the section error when an issue is found loading from the
+     * configuration element.
+     *
+     * @param exception
+     *        an optional CoreException
+     */
+    private void handleSectionError(final Exception exception) {
+        final String pluginId = getConfigurationElement().getDeclaringExtension()
+                .getNamespaceIdentifier();
+        String message = TabbedPropertyMessages.SectionDescriptor_Section_error;
+        if (exception == null) {
+            message = MessageFormat.format(
+                    TabbedPropertyMessages.SectionDescriptor_Section_error,
+                    new Object[] { pluginId });
+        } else {
+            message = MessageFormat
+                    .format(
+                            TabbedPropertyMessages.SectionDescriptor_class_not_found_error,
+                            new Object[] { pluginId });
+        }
+        final IStatus status = new Status(IStatus.ERROR, pluginId,
+                TabbedPropertyViewStatusCodes.SECTION_ERROR, message, exception);
+        TabbedPropertyViewPlugin.getPlugin().getLog().log(status);
+    }
 
-	/**
-	 * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getId()
-	 */
-	public String getId() {
-		return id;
-	}
+    /**
+     * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getId()
+     */
+    public String getId() {
+        return id;
+    }
 
-	/**
-	 * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getFilter()
-	 */
-	public IFilter getFilter() {
-		if (filter == null) {
-			try {
-				if (getConfigurationElement().getAttribute(ATT_SECTION_FILTER) != null) {
-					filter = (IFilter) configurationElement
-							.createExecutableExtension(ATT_SECTION_FILTER);
-				}
-			} catch (CoreException exception) {
-				handleSectionError(exception);
-			}
-		}
-		return filter;
-	}
+    /**
+     * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getFilter()
+     */
+    @Override
+    public IFilter getFilter() {
+        if (filter == null) {
+            try {
+                if (getConfigurationElement().getAttribute(ATT_SECTION_FILTER) != null) {
+                    filter = (IFilter) configurationElement
+                            .createExecutableExtension(ATT_SECTION_FILTER);
+                }
+            } catch (final CoreException exception) {
+                handleSectionError(exception);
+            }
+        }
+        return filter;
+    }
 
-	/**
-	 * Retrieves the value for section enablement which is a precise number of
-	 * items selected. For example: enablesFor=" 4" enables the action only when
-	 * 4 items are selected. If not specified, enable for all selections.
-	 * 
-	 * @return the value for section enablement.
-	 */
-	public int getEnablesFor() {
-		return enablesFor;
-	}
+    /**
+     * Retrieves the value for section enablement which is a precise number of
+     * items selected. For example: enablesFor=" 4" enables the action only when
+     * 4 items are selected. If not specified, enable for all selections.
+     *
+     * @return the value for section enablement.
+     */
+    @Override
+    public int getEnablesFor() {
+        return enablesFor;
+    }
 
-	/**
-	 * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getTargetTab()
-	 */
-	public String getTargetTab() {
-		return targetTab;
-	}
+    /**
+     * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getTargetTab()
+     */
+    public String getTargetTab() {
+        return targetTab;
+    }
 
-	/**
-	 * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getAfterSection()
-	 */
-	public String getAfterSection() {
-		if (afterSection == null) {
-			return super.getAfterSection();
-		}
-		return afterSection;
-	}
+    /**
+     * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getAfterSection()
+     */
+    @Override
+    public String getAfterSection() {
+        if (afterSection == null) {
+            return super.getAfterSection();
+        }
+        return afterSection;
+    }
 
-	/**
-	 * Creates an instance of a section described by this descriptor
-	 * 
-	 * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getSectionClass()
-	 */
-	public ISection getSectionClass() {
-		ISection section = null;
-		try {
-			section = (ISection) getConfigurationElement()
-					.createExecutableExtension(ATT_CLASS);
-		} catch (CoreException exception) {
-			handleSectionError(exception);
-		}
+    /**
+     * Creates an instance of a section described by this descriptor
+     *
+     * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getSectionClass()
+     */
+    public ISection getSectionClass() {
+        ISection section = null;
 
-		return section;
-	}
+        final Workbench workbench = (Workbench) PlatformUI.getWorkbench();
+        try {
+            section = (ISection) ContextInjectionFactory.make(Platform.getBundle(getConfigurationElement().getDeclaringExtension().getNamespaceIdentifier())
+                    .loadClass(
+                            getConfigurationElement().getAttribute(ATT_CLASS)), workbench.getContext());
+        } catch (final InjectionException e) {
+            handleSectionError(e);
+        } catch (final ClassNotFoundException e) {
+            handleSectionError(e);
+        } catch (final InvalidRegistryObjectException e) {
+            handleSectionError(e);
+        }
 
-	/**
-	 * Gets the input types that are valid for this section.
-	 * 
-	 * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getInputTypes()
-	 */
-	public List getInputTypes() {
-		if (inputTypes == null) {
-			inputTypes = new ArrayList();
-			IConfigurationElement[] elements = getConfigurationElement()
-					.getChildren(ELEMENT_INPUT);
-			for (int i = 0; i < elements.length; i++) {
-				IConfigurationElement element = elements[i];
-				inputTypes.add(element.getAttribute(ATT_INPUT_TYPE));
-			}
-		}
+        return section;
+    }
 
-		return inputTypes;
-	}
+    /**
+     * Gets the input types that are valid for this section.
+     *
+     * @see org.eclipse.ui.views.properties.tabbed.ISectionDescriptor#getInputTypes()
+     */
+    @Override
+    public List getInputTypes() {
+        if (inputTypes == null) {
+            inputTypes = new ArrayList();
+            final IConfigurationElement[] elements = getConfigurationElement()
+                    .getChildren(ELEMENT_INPUT);
+            for (int i = 0; i < elements.length; i++) {
+                final IConfigurationElement element = elements[i];
+                inputTypes.add(element.getAttribute(ATT_INPUT_TYPE));
+            }
+        }
 
-	/**
-	 * @see java.lang.Object#toString()
-	 */
-	public String toString() {
-		return getId();
-	}
+        return inputTypes;
+    }
 
-	/**
-	 * @return Returns the configurationElement.
-	 */
-	private IConfigurationElement getConfigurationElement() {
-		return configurationElement;
-	}
+    /**
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return getId();
+    }
+
+    /**
+     * @return Returns the configurationElement.
+     */
+    private IConfigurationElement getConfigurationElement() {
+        return configurationElement;
+    }
 }