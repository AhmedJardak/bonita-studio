/**
 * Copyright (C) 2010-2012 BonitaSoft S.A.
 * BonitaSoft, 31 rue Gustave Eiffel - 38000 Grenoble
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.bonitasoft.studio.application.job;

import org.bonitasoft.studio.common.repository.RepositoryManager;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.core.runtime.Status;
import org.eclipse.core.runtime.jobs.Job;
import org.eclipse.debug.core.DebugPlugin;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
import org.eclipse.jst.server.tomcat.core.internal.ITomcatServer;
import org.eclipse.wst.server.core.IRuntime;
import org.eclipse.wst.server.core.IRuntimeType;
import org.eclipse.wst.server.core.IRuntimeWorkingCopy;
import org.eclipse.wst.server.core.IServer;
import org.eclipse.wst.server.core.IServerListener;
import org.eclipse.wst.server.core.IServerType;
import org.eclipse.wst.server.core.IServerWorkingCopy;
import org.eclipse.wst.server.core.ServerCore;
import org.eclipse.wst.server.core.ServerEvent;

/**
 * @author Romain Bioteau
 *
 */
public class CopyOfStartEngineJob extends Job {

    public CopyOfStartEngineJob(String name) {
        super(name);
    }
    //
    //    /* (non-Javadoc)
    //     * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
    //     */
    //    @Override
    //    protected IStatus runInUI(IProgressMonitor monitor) {
    //
    //
    //        //	    try {
    //        //			BOSEngineManager.getInstance(monitor).start() ;
    //        //		} catch (Exception e) {
    //        //			BonitaStudioLog.log(e);
    //        //			return Status.CANCEL_STATUS ;
    //        //		}
    //        return Status.OK_STATUS;
    //    }

    @Override
    public IStatus run(IProgressMonitor monitor) {
        //        LogFactory.getFactory().release();
        //        Bootstrap bootstrap = new Bootstrap();

        //        bootstrap.setCatalinaHome("/Users/Romain/Desktop/BOS-5.7.2-Tomcat-6.0.33");
        //        try {
        //            bootstrap.start();
        //        } catch (Exception e) {
        //            e.printStackTrace();
        //
        //        }
        //        String memento;
        //
        //        try {
        //            ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
        //            memento = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?> <launchConfiguration local=\"true\" path=\"/RemoteEngine\"/> ";
        //            //PlatformUtil.getFileContent(new FileInputStream(new File(FileLocator.toFileURL(BonitaStudioApplication.class.getResource("memento.xml")).getFile())));
        //            ILaunchConfiguration conf = DebugPlugin.getDefault().getLaunchManager().getLaunchConfiguration(memento);
        //            DebugUIPlugin.launchInBackground(conf, "run");
        //        }catch (CoreException e) {
        //            // TODO Auto-generated catch block
        //            e.printStackTrace();
        //        }

        //        try {
        //            ProcessBuilder pBuilder = new ProcessBuilder("/bin/sh","/Users/Romain/Desktop/BOS-6.0-SNAPSHOT-Tomcat-6.0.35/bin/catalina.sh", "start");
        //            System.out.println(pBuilder);
        //            Process p = pBuilder.start();
        //            System.out.println(p.getOutputStream());
        //            p.waitFor();
        //        } catch (IOException e) {
        //            // TODO Auto-generated catch block
        //            e.printStackTrace();
        //        }
        //        catch (InterruptedException e) {
        //            // TODO Auto-generated catch block
        //            e.printStackTrace();
        //        }

        IRuntimeType type =  ServerCore.findRuntimeType("org.eclipse.jst.server.tomcat.runtime.60");
        try {
            IRuntimeWorkingCopy tomcatRuntime = type.createRuntime("myRuntime",null);
            tomcatRuntime.setLocation(Path.fromOSString("/Users/Romain/Desktop/BOS-6.0-SNAPSHOT-Tomcat-6.0.35"));
            IStatus status = tomcatRuntime.validate(null);
            IRuntime runtime =  tomcatRuntime.save(true, null);
            System.out.println(status);
            IServerType sType = ServerCore.findServerType("org.eclipse.jst.server.tomcat.60");
            IFile file = RepositoryManager.getInstance().getCurrentRepository().getProject().getFile("myServerSerialization");
            IServerWorkingCopy server = sType.createServer("myServerId", file, runtime, null);
            server.setAttribute(ITomcatServer.PROPERTY_INSTANCE_DIR, "/Users/Romain/Desktop/BOS-6.0-SNAPSHOT-Tomcat-6.0.35");
            server.setAttribute(ITomcatServer.PROPERTY_DEPLOY_DIR, "/Users/Romain/Desktop/BOS-6.0-SNAPSHOT-Tomcat-6.0.35/webapps");
            server.setAttribute("start-timeout", 120);
            IFolder confFolder = RepositoryManager.getInstance().getCurrentRepository().getProject().getFolder("Server");
            server.setServerConfiguration(confFolder);
            for(ILaunchConfiguration conf :  DebugPlugin.getDefault().getLaunchManager().getLaunchConfigurations()){
                if(conf.getName().contains("Tomcat")){

                    final ILaunchConfigurationWorkingCopy workingCopy = conf.getWorkingCopy();
                    String vmArgs =  workingCopy.getAttribute("org.eclipse.jdt.launching.VM_ARGUMENTS","") ;
                    String bonitaArg = " -Dbonita.home=\"/Users/Romain/Desktop/BOS-6.0-SNAPSHOT-Tomcat-6.0.35/bonita\"";
                    if(!vmArgs.endsWith(bonitaArg)){
                        vmArgs = vmArgs + bonitaArg;
                    }

                    workingCopy.setAttribute("org.eclipse.jdt.launching.VM_ARGUMENTS",vmArgs);
                    workingCopy.doSave();
                }
            }
            IServer tomcat = server.save(true, null);
            tomcat.addServerListener(new IServerListener() {

                @Override
                public void serverChanged(ServerEvent event) {
                    System.out.println(event);
                }
            });
            tomcat.start("run", new NullProgressMonitor());

        } catch (CoreException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        System.out.println(ServerCore.getServerTypes());
        return Status.OK_STATUS;
    }

}
