/**
 * Copyright (C) 2012 BonitaSoft S.A.
 * BonitaSoft, 32 rue Gustave Eiffel - 38000 Grenoble
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.bonitasoft.studio.migration.utils;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.bonitasoft.studio.migration.MigrationPlugin;
import org.bonitasoft.studio.migration.model.report.Change;
import org.bonitasoft.studio.migration.model.report.Report;
import org.bonitasoft.studio.pics.Pics;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * @author Romain Bioteau
 *
 */
public class PDFMigrationReportWriter {
	
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,Font.BOLD);
	
	private Report report;

	public PDFMigrationReportWriter(Report report){
		this.report = report;
	}
	
	public void execute(String filePath){
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(filePath));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private void addMetaData(Document document) {
		document.addTitle(report.getName());
		document.addSubject("Migration status report");
		document.addKeywords("BPMN, Migration, BonitaSoft, Process");
		document.addAuthor("Bonita Studio");
		document.addCreator("Bonita Studio");
	}

	private void addTitlePage(Document document)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph(report.getName(), catFont));
		//addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(new SimpleDateFormat("dd MMM yyyy",new Locale(Platform.getNL())).format(new Date()), smallBold));
//		addEmptyLine(preface, 3);
//		preface.add(new Paragraph("This document describes something which is very important ",
//				smallBold));
//
//		addEmptyLine(preface, 8);
//
//		preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
//				redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private void addContent(Document document) throws DocumentException, MalformedURLException, IOException {
		Anchor anchor = new Anchor("Migration report", catFont);
		anchor.setName("Migration report");

		// Second parameter is the number of the chapter
		Paragraph mainPara = new Paragraph(anchor);
		// Add a table
		createTable(mainPara);

		// Now add all this to the document
		document.add(mainPara);


	}

	private void createTable(Paragraph paragrah)
			throws MalformedURLException, IOException, DocumentException {
		PdfPTable table = new PdfPTable(6);
		
		PdfPCell c1 = new PdfPCell(new Phrase("Type"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		c1.setVerticalAlignment(Element.ALIGN_TOP);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Name"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		c1.setVerticalAlignment(Element.ALIGN_TOP);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Property"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);	
		c1.setVerticalAlignment(Element.ALIGN_TOP);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Information"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);	
		c1.setVerticalAlignment(Element.ALIGN_TOP);
		table.addCell(c1);
		
		c1 = new PdfPCell(new Phrase("Status"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		c1.setVerticalAlignment(Element.ALIGN_TOP);
		table.addCell(c1);
		

		c1 = new PdfPCell(new Phrase("Reviewed ?"));
		c1.setVerticalAlignment(Element.ALIGN_TOP);
		table.addCell(c1);
		
		table.setHeaderRows(1);

		for(Change change : report.getChanges()){
			addTableRow(table,change);
		}
		table.setWidths(new int[]{3,3,3,4,2,3});
		table.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.setComplete(true);
		
		paragrah.add(table);
	}

	private void addTableRow(PdfPTable table, Change change) throws BadElementException, MalformedURLException, IOException {
		PdfPCell cell = new PdfPCell(new Phrase(change.getElementType()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		
		cell = new PdfPCell(new Phrase(change.getElementName()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		
		cell = new PdfPCell(new Phrase(change.getPropertyName()));
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);

		cell = new PdfPCell(new Phrase(change.getDescription()));
		cell.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
		cell.setVerticalAlignment(Element.ALIGN_TOP);
		table.addCell(cell);
		
		cell = new PdfPCell(getImageForStatus(change.getStatus()),false);
		cell.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell.setVerticalAlignment(Element.ALIGN_CENTER);
		table.addCell(cell);
		
		table.addCell(Boolean.valueOf(change.isReviewed()).toString());
	}
	
	private com.itextpdf.text.Image getImageForStatus(int status) throws BadElementException, MalformedURLException, IOException {
		switch (status) {
		case IStatus.OK: return  Image.getInstance(FileLocator.toFileURL(MigrationPlugin.getDefault().getBundle().getResource("/icons/valid.png")));
		case IStatus.WARNING: return Image.getInstance(FileLocator.toFileURL(MigrationPlugin.getDefault().getBundle().getResource("/icons/warning.gif")));
		case IStatus.ERROR: return Image.getInstance(FileLocator.toFileURL(MigrationPlugin.getDefault().getBundle().getResource("/icons/error.png")));
		default:break;
		}

		return null;
	}


	private void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}
