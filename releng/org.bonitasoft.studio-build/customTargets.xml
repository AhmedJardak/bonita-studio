<!--
 * Copyright (C) 2009, 2010 BonitaSoft S.A.
 * BonitaSoft, 31 rue Gustave Eiffel - 38000 Grenoble
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2.0 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<project name="Build specific targets and properties" default="noDefault" xmlns:tigris="tigris:org.tigris.subversion.svnant" xmlns:gmfAnt="http://ecliptical.ca/gmf/ant">
	
	<taskdef name="emfGen" classname="org.eclipse.emf.importer.ecore.taskdefs.EcoreGeneratorTask"/>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" uri="tigris:org.tigris.subversion.svnant"/> 
	<taskdef classpath="${antDeps}/bonita_antTasks.jar" name="refreshWorkspace" classname="org.bonitasoft.studio.antTasks.RefreshWorkspaceTask"/>
	<taskdef classpath="${antDeps}/bonita_antTasks.jar" name="generateIntroLocalization" classname="org.bonitasoft.studio.antTasks.GenerateIntroLocalizedContent"/>
	
	<!-- Used when developing ant task -->
	<!--taskdef classpath="/home/mistria/workspaceBonita/org.bonitasoft.studio-antTasks/bin" name="refreshWorkspace" classname="org.bonitasoft.studio.antTasks.RefreshWorkspaceTask"/-->
	
	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>
	
	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${builder}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${builder}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" unless="skipMaps">
		<copy todir="${buildDirectory}/maps" >
			<fileset dir="${builder}/maps" />
		</copy>
	</target>


	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<ant antfile="${genericTargets}" target="fetchElement" >
		    <property name="type" value="plugin" />
		    <property name="id" value="${topLevelElementId}" />
		</ant>
		<replace token="XXX_BONITA_PRODUCT_VERSION_XXX" value="${forceQualifier}" dir="${buildDirectory}/plugins/" includes="org.bonitasoft.studio*/plugin.xml" />
		<replace token="XXX_BONITA_PRODUCT_VERSION_XXX" value="${forceQualifier}" dir="${buildDirectory}/plugins/" includes="org.bonitasoft.studio*/*.product" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">

	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
		<!-- force fetch of models -->
		<ant antfile="${genericTargets}" target="fetchElement" >
		    <property name="type" value="plugin" />
		    <property name="id" value="${modelsFolder}" />
		</ant>
		<condition property="redirectId" value="${guidance.redirect.id}" else="80">
				<and>
				<isset property="guidance.redirect.id"/>
				<not>
					<equals arg1="${guidance.redirect.id}" arg2=""/>
				</not>
			</and>
		</condition>
		
		<!-- Replace user guidance URL -->
		<replaceregexp file="${buildDirectory}/plugins/org.bonitasoft.studio.workspace/workspace/studio.properties"
					match='guidance\.url = http://www\.bonitasoft\.com/bos_redirect.php?bos_redirect_id=[\.0-9]*' replace='guidance.url = http://www.bonitasoft.com/bos_redirect.php?bos_redirect_id=${redirectId}'>
		</replaceregexp>
		
		<emf.Ecore2Java
			modelproject="${buildDirectory}/plugins/${modelsFolder}/process.ecore"
			model="${buildDirectory}/plugins/${modelsFolder}/process.ecore"
			genmodel="${buildDirectory}/plugins/${modelsFolder}/process.genmodel"
			modelprojectfragmentpath="src"
			reconcilegenmodel="keep"
			generatejavacode="true"
			generatemodelproject="true"
			generateeditproject="true"
			generateeditorproject="false"
			generatetestsproject="false"/>
		<!-- EMFTemplates doesn't work by now and produce error on Mac, it is replaced just after
			templatepath="${buildDirectory}/plugins/${modelsFolder}/EMFTemplates"/ -->
		<!--Replace the provider name of the plugins which are generated.
		There was an attempt using EMFTemplate but not working in IC-->
		<refreshWorkspace project="${modelsFolder}"/>
		<replace file="${buildDirectory}/plugins/org.bonitasoft.studio.model/plugin.properties"
			value="BonitaSoft S.A." token="www.example.org">
		</replace>
		<replace file="${buildDirectory}/plugins/org.bonitasoft.studio.model.edit/plugin.properties"
			value="BonitaSoft S.A." token="www.example.org">
		</replace>
		
		<refreshWorkspace project="${modelsFolder}"/>
		<gmfAnt:GenerateDiagramCode
			gmfgenPath="org.bonitasoft.studio-models/process.gmfgen"/>
		<refreshWorkspace project="${modelsFolder}"/>
		<gmfAnt:GenerateDiagramCode
			gmfgenPath="${modelsFolder}/form/form.gmfgen"/>
		<refreshWorkspace project="org.bonitasoft.studio.model"/>
		<refreshWorkspace project="org.bonitasoft.studio.model.edit"/>
		<refreshWorkspace project="org.bonitasoft.studio.diagram"/>
		<refreshWorkspace project="org.bonitasoft.studio.diagram.form"/>
		<!-- Could not use ant task since org.eclipse.ant.core.antRunner, that runs this
		build, does not handle the -lib argument, so that 'svn' and 'mvn' tasks that 
		are used in following plugins could not run -->
		<!-- TODO: find a way to inject jars in antRunner -->
		<property name="bos.version" value=""/> <!-- Override bos.version of it doesn't exist -->
		<condition property="versionArgument" value="-Dbos.version=${bos.version}" else="-DMAVEN_HOME=${MAVEN_HOME}">
			<!-- Cannot put an empty string in arg, then repeats a prop def (see ant bug 42447)... -->
			<and>
				<isset property="bos.version"/>
				<not>
					<equals arg1="${bos.version}" arg2=""/>
				</not>
			</and>
		</condition>
		
		<echo>bos.version=${bos.version}, arg=${versionArgument}</echo>
		<echo>maven.repo=${maven.repo}</echo>
		<echo>artifact.version=${artifact.version}</echo>

		<!--<exec executable="${antExecutable}" dir="${buildDirectory}/plugins/${engineBundle}" failifexecutionfails="true" failonerror="true">
			<arg value="-f"/>
			<arg value="getEngineLibs.xml"/>
			<arg value="-lib"/>
			<arg value="antDeps"/>
			<arg value="-DMAVEN_HOME=${MAVEN_HOME}"/>
			<arg value="-DbuildDirectory=${buildDirectory}"/>
			<arg value="${versionArgument}" />
			<arg value="-DartifactVersion=${engine.version}"/>
			<arg value="-Dmaven.repo=${maven.repo}"/>
		</exec>-->
		<!--build connectors need to be done before building console-->
		<exec executable="${antExecutable}" dir="${buildDirectory}/plugins/org.bonitasoft.studio.connectors"  failifexecutionfails="true" failonerror="true">
			<arg value="-f"/>
			<arg value="getConnectors.xml"/>
			<arg value="-lib"/>
			<arg value="antDeps"/>
			<arg value="-DMAVEN_HOME=${MAVEN_HOME}"/>
			<arg value="${versionArgument}" />
			<arg value="-DartifactVersion=${connectors.version}"/>
			<arg value="-Dmaven.repo=${maven.repo}"/>
		</exec>
		<exec executable="${antExecutable}" dir="${buildDirectory}/plugins/org.bonitasoft.studio.actors"  failifexecutionfails="true" failonerror="true">
			<arg value="-f"/>
			<arg value="getFilters.xml"/>
			<arg value="-lib"/>
			<arg value="antDeps"/>
			<arg value="-DMAVEN_HOME=${MAVEN_HOME}"/>
			<arg value="${versionArgument}" />
			<arg value="-DartifactVersion=${connectors.version}"/>
			<arg value="-Dmaven.repo=${maven.repo}"/>
		</exec>
		<exec executable="${antExecutable}" dir="${buildDirectory}/plugins/${simulationBundle}"  failifexecutionfails="true" failonerror="true">
			<arg value="-f"/>
			<arg value="getSimulationLibs.xml"/>
			<arg value="-lib"/>
			<arg value="antDeps"/>
			<arg value="-DMAVEN_HOME=${MAVEN_HOME}"/>
			<arg value="${versionArgument}" />
			<arg value="-DengineBundle=${engineBundle}" />
			<arg value="-DartifactVersion=${simulation.version}"/>
			<arg value="-Dmaven.repo=${maven.repo}"/>
		</exec>	
		<exec executable="${antExecutable}" dir="${buildDirectory}/plugins/${userXPBundle}"  failifexecutionfails="true" failonerror="true">
			<arg value="-f"/>
			<arg value="getConsole.xml"/>
			<arg value="-lib"/>
			<arg value="antDeps"/>
			<arg value="-DMAVEN_HOME=${MAVEN_HOME}"/>
			<arg value="${versionArgument}" />
			<arg value="-DengineBundle=${engineBundle}"/>
			<arg value="-DartifactVersion=${web.version}"/>
			<arg value="-Dclassifier=${classifier}"/>
			<arg value="-Dmaven.repo=${maven.repo}"/>
		</exec>
		<antcall target="postPostFetch"/>
	</target>

	<target name="checkCustomCustomTargetExists">
		<available file="${builder}/customCustomTargets.xml" property="customCustomTargetsExists" value="true"/>
		<echo>file: ${builder}/customCustomTargets.xml</echo>
		<echo>exists: ${customCustomTargetsExists}</echo>
	</target>
	
	
	<target name="postPostFetch" depends="checkCustomCustomTargetExists" if="customCustomTargetsExists">
		<exec executable="${antExecutable}" dir="${builder}"  failifexecutionfails="true" failonerror="true">
			<arg value="postPostFetch"/>
			<arg line="-f ${builder}/customCustomTargets.xml"/>
			<arg line="-lib antDeps"/>
			<arg value="-DbuildDirectory=${buildDirectory}"/>
			<arg value="-DMAVEN_HOME=${MAVEN_HOME}"/>
			<arg value="${versionArgument}" />
			<arg value="-DversionArgument=${versionArgument}" />
			<arg value="-DantExecutable=${antExecutable}"/>
			<arg value="-Dartifact.version=${artifact.version}"/>
			<arg value="-Dengine.version=${engine.version}"/>
			<arg value="-Dweb.version=${web.version}"/>
			<arg value="-Dconnectors.version=${connectors.version}"/>
			<arg value="-Dsimulation.version=${simulation.version}"/>
			<arg value="-Dmaven.repo=${maven.repo}"/>
		</exec> 
	</target>
	
	
	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<!--antcall target="clean" /-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
		<antcall target="postPostPackage"/>
	</target>
	
	<target name="postPostPackage" depends="checkCustomCustomTargetExists" if="customCustomTargetsExists">
		<exec executable="${antExecutable}" dir="${builder}"  failifexecutionfails="true" failonerror="false">
			<arg value="postPostPackage"/>
			<arg line="-f ${builder}/customCustomTargets.xml"/>
			<arg line="-lib antDeps"/>
			<arg value="-DbuildDirectory=${buildDirectory}"/>
			<arg value="-DMAVEN_HOME=${MAVEN_HOME}"/>
			<arg value="${isBranchArgument}"/>
			<arg value="${versionArgument}" />
		</exec>
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
	</target>


	<target name="buildTests" unless="doSkipTests">
		<!-- Tests are build after the product, using product as platform to build and run -->
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test" unless="skipTest">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>
